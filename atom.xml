<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>路漫漫其修远兮</title>
  
  <subtitle>灵自天生，用心雕琢</subtitle>
  <link href="https://xiaobinzhao.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaobinzhao.github.io/"/>
  <updated>2021-06-25T06:43:03.168Z</updated>
  <id>https://xiaobinzhao.github.io/</id>
  
  <author>
    <name>琢灵</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>敏捷开发（Agile）</title>
    <link href="https://xiaobinzhao.github.io/2021/06/25/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    <id>https://xiaobinzhao.github.io/2021/06/25/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</id>
    <published>2021-06-25T10:40:01.000Z</published>
    <updated>2021-06-25T06:43:03.168Z</updated>
    
    
    <summary type="html">&lt;p&gt;敏捷开发是一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://xiaobinzhao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="敏捷开发" scheme="https://xiaobinzhao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="敏捷开发" scheme="https://xiaobinzhao.github.io/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
    <category term="agile" scheme="https://xiaobinzhao.github.io/tags/agile/"/>
    
    <category term="scrum" scheme="https://xiaobinzhao.github.io/tags/scrum/"/>
    
    <category term="KanBan" scheme="https://xiaobinzhao.github.io/tags/KanBan/"/>
    
    <category term="ScrumBan" scheme="https://xiaobinzhao.github.io/tags/ScrumBan/"/>
    
  </entry>
  
  <entry>
    <title>VDI 远程协议的一些解释</title>
    <link href="https://xiaobinzhao.github.io/2020/12/24/VDI%20%E8%BF%9C%E7%A8%8B%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%A3%E9%87%8A/"/>
    <id>https://xiaobinzhao.github.io/2020/12/24/VDI%20%E8%BF%9C%E7%A8%8B%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%A3%E9%87%8A/</id>
    <published>2020-12-24T10:40:01.000Z</published>
    <updated>2020-12-24T08:04:41.926Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;桌面协议&quot;&gt;&lt;a href=&quot;#桌面协议&quot; class=&quot;headerlink&quot; title=&quot;桌面协议&quot;&gt;&lt;/a&gt;桌面协议&lt;/h1&gt;&lt;p&gt;虚拟桌面架构（VDI）中，协议是非常关键的一环，其定义了将服务器虚拟出的客户机系统从服务器传输到各类终端的规则，涉及到安全，图像处理，数据压缩，网络传输协议等多个方面，直接决定着虚拟桌面的终端体验。&lt;/p&gt;</summary>
    
    
    
    <category term="VDI" scheme="https://xiaobinzhao.github.io/categories/VDI/"/>
    
    
    <category term="VDI" scheme="https://xiaobinzhao.github.io/tags/VDI/"/>
    
    <category term="spice" scheme="https://xiaobinzhao.github.io/tags/spice/"/>
    
    <category term="vnc" scheme="https://xiaobinzhao.github.io/tags/vnc/"/>
    
  </entry>
  
  <entry>
    <title>cloudbase-init 源码研究</title>
    <link href="https://xiaobinzhao.github.io/2020/12/04/cloudbase-init%20%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    <id>https://xiaobinzhao.github.io/2020/12/04/cloudbase-init%20%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/</id>
    <published>2020-12-04T10:40:01.000Z</published>
    <updated>2020-12-08T01:30:38.276Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cloudbase-init-源码研究&quot;&gt;&lt;a href=&quot;#cloudbase-init-源码研究&quot; class=&quot;headerlink&quot; title=&quot;cloudbase-init 源码研究&quot;&gt;&lt;/a&gt;cloudbase-init 源码研究&lt;/h1&gt;&lt;p&gt;cloudbase-init是cloud-init的windows版本实现，与cloudinit有一些区别，官方文档请参看&lt;a href=&quot;https://cloudbase-init.readthedocs.io/&quot;&gt;https://cloudbase-init.readthedocs.io/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://xiaobinzhao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="cloudbase-init" scheme="https://xiaobinzhao.github.io/tags/cloudbase-init/"/>
    
  </entry>
  
  <entry>
    <title>遗留系统改造思路和方法论</title>
    <link href="https://xiaobinzhao.github.io/2020/10/22/%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E6%94%B9%E9%80%A0%E6%80%9D%E8%B7%AF%E5%92%8C%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>https://xiaobinzhao.github.io/2020/10/22/%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E6%94%B9%E9%80%A0%E6%80%9D%E8%B7%AF%E5%92%8C%E6%96%B9%E6%B3%95%E8%AE%BA/</id>
    <published>2020-10-22T02:05:22.000Z</published>
    <updated>2020-10-28T02:56:57.054Z</updated>
    
    
    <summary type="html">我们总是会遇到各种遗留系统因为种种原因不能重新开发又不能“弃之如履”，那么有一套经验总结的方法论显得尤为必要，本文简单记录了一些要点，抛砖引玉。</summary>
    
    
    
    <category term="架构" scheme="https://xiaobinzhao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="遗留系统改造" scheme="https://xiaobinzhao.github.io/tags/%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E6%94%B9%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>RESTful思考</title>
    <link href="https://xiaobinzhao.github.io/2020/10/21/RestFul%E6%80%9D%E8%80%83/"/>
    <id>https://xiaobinzhao.github.io/2020/10/21/RestFul%E6%80%9D%E8%80%83/</id>
    <published>2020-10-21T09:49:01.000Z</published>
    <updated>2020-10-22T02:14:34.086Z</updated>
    
    
    <summary type="html">Richardson的成熟度模型以及RESTful API设计的一些思考</summary>
    
    
    
    <category term="架构" scheme="https://xiaobinzhao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="RESTful" scheme="https://xiaobinzhao.github.io/tags/RESTful/"/>
    
    <category term="etag" scheme="https://xiaobinzhao.github.io/tags/etag/"/>
    
    <category term="Richardson成熟度模型" scheme="https://xiaobinzhao.github.io/tags/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="RMM" scheme="https://xiaobinzhao.github.io/tags/RMM/"/>
    
  </entry>
  
  <entry>
    <title>协程</title>
    <link href="https://xiaobinzhao.github.io/2020/10/21/%E5%8D%8F%E7%A8%8B/"/>
    <id>https://xiaobinzhao.github.io/2020/10/21/%E5%8D%8F%E7%A8%8B/</id>
    <published>2020-10-21T01:49:01.000Z</published>
    <updated>2020-10-21T03:29:14.256Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;协程，又称微线程，纤程。英文名Coroutine。&lt;/p&gt;
&lt;p&gt;那么为什么需要协程？&lt;/p&gt;
&lt;h2 id=&quot;引出问题&quot;&gt;&lt;a href=&quot;#引出问题&quot; class=&quot;headerlink&quot; title=&quot;引出问题&quot;&gt;&lt;/a&gt;引出问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;同步编程的并发性不高&lt;/li&gt;
&lt;li&gt;多进程编程效率受CPU核数限制，当任务数量远大于CPU核数时，执行效率会降低。&lt;/li&gt;
&lt;li&gt;多线程编程需要线程之间的通信，而且需要锁机制来防止共享变量被不同线程乱改，而且由于Python中的GIL(全局解释器锁)，所以实际上也无法做到真正的并行。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="https://xiaobinzhao.github.io/categories/python/"/>
    
    
    <category term="协程" scheme="https://xiaobinzhao.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
    <category term="Coroutine" scheme="https://xiaobinzhao.github.io/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>hexo-Next + Github Page制作个人网站使用记录</title>
    <link href="https://xiaobinzhao.github.io/2020/10/20/hexo/"/>
    <id>https://xiaobinzhao.github.io/2020/10/20/hexo/</id>
    <published>2020-10-20T01:49:01.000Z</published>
    <updated>2020-10-21T03:59:56.466Z</updated>
    
    
    <summary type="html">记录使用github page发布个人网站的方法和调整hexo-Next主题的步骤</summary>
    
    
    
    <category term="hexo" scheme="https://xiaobinzhao.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://xiaobinzhao.github.io/tags/hexo/"/>
    
    <category term="Next" scheme="https://xiaobinzhao.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>IO模型</title>
    <link href="https://xiaobinzhao.github.io/2020/10/20/io%20%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%98%BB%E5%A1%9E%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9E%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5/"/>
    <id>https://xiaobinzhao.github.io/2020/10/20/io%20%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%98%BB%E5%A1%9E%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9E%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5/</id>
    <published>2020-10-20T01:49:01.000Z</published>
    <updated>2020-10-20T04:01:02.211Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;IO模型&quot;&gt;&lt;a href=&quot;#IO模型&quot; class=&quot;headerlink&quot; title=&quot;IO模型&quot;&gt;&lt;/a&gt;IO模型&lt;/h1&gt;&lt;p&gt;在Linux(UNIX)操作系统中，共有五种IO模型，分别是：阻塞IO模型、非阻塞IO模型、IO复用模型、信号驱动IO模型以及异步IO模型。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://xiaobinzhao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="IO模型" scheme="https://xiaobinzhao.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="阻塞" scheme="https://xiaobinzhao.github.io/tags/%E9%98%BB%E5%A1%9E/"/>
    
    <category term="非阻塞" scheme="https://xiaobinzhao.github.io/tags/%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    
    <category term="同步" scheme="https://xiaobinzhao.github.io/tags/%E5%90%8C%E6%AD%A5/"/>
    
    <category term="异步" scheme="https://xiaobinzhao.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>yield</title>
    <link href="https://xiaobinzhao.github.io/2020/10/20/yiled/"/>
    <id>https://xiaobinzhao.github.io/2020/10/20/yiled/</id>
    <published>2020-10-20T01:49:01.000Z</published>
    <updated>2020-10-20T03:48:43.128Z</updated>
    
    
    <summary type="html">yield 解释</summary>
    
    
    
    <category term="python" scheme="https://xiaobinzhao.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xiaobinzhao.github.io/tags/python/"/>
    
    <category term="yield" scheme="https://xiaobinzhao.github.io/tags/yield/"/>
    
  </entry>
  
  <entry>
    <title>mysql大小写敏感问题</title>
    <link href="https://xiaobinzhao.github.io/2020/10/20/%E8%A7%A3%E5%86%B3mysql%E5%A4%A7%E5%B0%8F%E5%86%99%E4%B8%8D%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaobinzhao.github.io/2020/10/20/%E8%A7%A3%E5%86%B3mysql%E5%A4%A7%E5%B0%8F%E5%86%99%E4%B8%8D%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-20T01:49:01.000Z</published>
    <updated>2020-10-20T03:46:18.825Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Mysql/MariaDB 默认是大小写不敏感的，有时会比较影响业务，我们期望能够大小写敏感。&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://xiaobinzhao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="mysql" scheme="https://xiaobinzhao.github.io/tags/mysql/"/>
    
    <category term="大小写敏感" scheme="https://xiaobinzhao.github.io/tags/%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>FastAPI</title>
    <link href="https://xiaobinzhao.github.io/2020/10/20/FastAPI/"/>
    <id>https://xiaobinzhao.github.io/2020/10/20/FastAPI/</id>
    <published>2020-10-20T01:49:01.000Z</published>
    <updated>2020-12-08T09:02:42.385Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;学习了一下FastAPI，感觉其实现了目前python-web需要的大部分功能，可以说是这些python web框架的集大成者。我所关注的特性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动化文档。文档标准是OpenAPI，也就是swagger。目前xView项目实现了与FastAPI类似的自动化文档，但是欠缺了一点是：没有使用Pydantic这样的声明类型。request参数的构造也咩有FastAPI灵活便捷。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="FastAPI" scheme="https://xiaobinzhao.github.io/categories/FastAPI/"/>
    
    
    <category term="FastAPI" scheme="https://xiaobinzhao.github.io/tags/FastAPI/"/>
    
  </entry>
  
  <entry>
    <title>并发和锁</title>
    <link href="https://xiaobinzhao.github.io/2020/10/20/%E5%B9%B6%E5%8F%91%E5%92%8C%E9%94%81/"/>
    <id>https://xiaobinzhao.github.io/2020/10/20/%E5%B9%B6%E5%8F%91%E5%92%8C%E9%94%81/</id>
    <published>2020-10-20T01:49:01.000Z</published>
    <updated>2021-06-29T01:02:00.981Z</updated>
    
    
    <summary type="html">&lt;p&gt;在web开过程中，经常会遇到高并发和资源共享的问题，这些问题的本质是：并行的请求转成串行。我们应该考虑的是怎么在尽可能提高吞吐量的情况下，保证资源的合理生产和消耗。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://xiaobinzhao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="锁" scheme="https://xiaobinzhao.github.io/tags/%E9%94%81/"/>
    
    <category term="并发" scheme="https://xiaobinzhao.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="mysql 悲观锁" scheme="https://xiaobinzhao.github.io/tags/mysql-%E6%82%B2%E8%A7%82%E9%94%81/"/>
    
    <category term="mysql 乐观锁" scheme="https://xiaobinzhao.github.io/tags/mysql-%E4%B9%90%E8%A7%82%E9%94%81/"/>
    
    <category term="oslo.concurrency" scheme="https://xiaobinzhao.github.io/tags/oslo-concurrency/"/>
    
    <category term="文件锁" scheme="https://xiaobinzhao.github.io/tags/%E6%96%87%E4%BB%B6%E9%94%81/"/>
    
    <category term="fcntl" scheme="https://xiaobinzhao.github.io/tags/fcntl/"/>
    
    <category term="分布式锁" scheme="https://xiaobinzhao.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    <category term="cap" scheme="https://xiaobinzhao.github.io/tags/cap/"/>
    
    <category term="redis lock" scheme="https://xiaobinzhao.github.io/tags/redis-lock/"/>
    
    <category term="etcd lock" scheme="https://xiaobinzhao.github.io/tags/etcd-lock/"/>
    
  </entry>
  
  <entry>
    <title>python异步编程</title>
    <link href="https://xiaobinzhao.github.io/2020/10/20/python%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>https://xiaobinzhao.github.io/2020/10/20/python%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</id>
    <published>2020-10-20T01:49:01.000Z</published>
    <updated>2021-05-11T03:51:51.990Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是异步编程&quot;&gt;&lt;a href=&quot;#什么是异步编程&quot; class=&quot;headerlink&quot; title=&quot;什么是异步编程&quot;&gt;&lt;/a&gt;什么是异步编程&lt;/h1&gt;&lt;p&gt;提到异步，那么就有同步。需要了解一下几个名词：同步/异步、阻塞/非阻塞。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://xiaobinzhao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="python" scheme="https://xiaobinzhao.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xiaobinzhao.github.io/tags/python/"/>
    
    <category term="异步编程" scheme="https://xiaobinzhao.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>缓存穿透，缓存击穿，缓存雪崩</title>
    <link href="https://xiaobinzhao.github.io/2020/10/19/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
    <id>https://xiaobinzhao.github.io/2020/10/19/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</id>
    <published>2020-10-19T01:49:01.000Z</published>
    <updated>2021-06-23T01:34:53.527Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;设计一个缓存系统，不得不要考虑的问题就是：缓存穿透、缓存击穿与失效时的雪崩效应。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://xiaobinzhao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="缓存穿透" scheme="https://xiaobinzhao.github.io/tags/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/"/>
    
    <category term="缓存击穿" scheme="https://xiaobinzhao.github.io/tags/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
    
    <category term="缓存雪崩" scheme="https://xiaobinzhao.github.io/tags/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
    
  </entry>
  
</feed>
